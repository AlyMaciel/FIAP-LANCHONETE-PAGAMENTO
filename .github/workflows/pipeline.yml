name: Maven Package

on:
  push:
  
jobs:
  build-app:
    runs-on: ubuntu-latest
    container:
      image: maven:3.8.7-openjdk-18-slim
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
          cache: 'maven'
      - name: Build with Maven
        run: mvn clean package -DskipTests=true

  unit-test:
    needs: build-app
    runs-on: ubuntu-latest
    container:
      image: maven:3.8.7-openjdk-18-slim
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
          cache: 'maven'
      - name: Unit Tests
        run: mvn test

  sonarcloud:
    name: SonarQube Cloud
    needs: unit-test
    runs-on: ubuntu-latest
    # if: ${{ github.event_name == 'pull_request' }} # execução no evento de pull request
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze with SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=AlyMaciel_FIAP-LANCHONETE-PAGAMENTO
        
  deploy:
    runs-on: ubuntu-latest
    needs: sonarcloud
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      # Step 1: Fazer o checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Configurar credenciais da AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Criar repositório ECS caso não exista
      - name: Create ECR Repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }} || aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY }} --region ${{ secrets.AWS_REGION }}

      # Step 4: Fazer login no repositório ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # Step 5: Fazer build da imagem da aplicação java (baseado do arquivo docker do projeto)
      - name: Build Docker image
        run: |
          docker build -t restaurant-application .
          docker tag restaurant-application:latest ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 6: Fazer push da imagem criada para o repositório ECS
      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 7: Instalar kubectl na versão do cluster eks criado
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.31.0'

      # Step 8: Configuração do kubernates
      - name: Set up kubeconfig
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER }}

      # Step 9: Setar valores das variáveis nos arquivos do Kubernetes
      - name: Replace environment variables in k8s files
        run: |
          sed -i "s/{{MONGO_URI}}/${MONGO_URI}/g" k8s/secret-mongo-db.yaml
          sed -i "s/{{MONGO_DB_NAME}}/${MONGO_DB_NAME}/g" k8s/secret-mongo-db.yaml
          sed -i "s/{{ACCOUNT_ID}}/${ACCOUNT_ID}/g" k8s/deployment.yaml
          sed -i "s/{{AWS_REGION}}/${AWS_REGION}/g" k8s/deployment.yaml
          sed -i "s/{{ECR_REPOSITORY}}/${ECR_REPOSITORY}/g" k8s/deployment.yaml

      # Step 10: Aplicar secrets no Kubernetes
      - name: Apply Kubernetes secrets
        run: |
          kubectl apply -f k8s/secret-mongo-db.yaml

      # Step 11: Deletar os pods existentes para forçar a criação de novos
      - name: Delete existing pods
        run: |
          kubectl delete pod -l app=deployment-pagamento-application

      # Step 12: Realizar deploy de imagem do ecs no cluster eks
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/svc-pagamento-application.yaml
          kubectl apply -f k8s/hpa.yaml
          kubectl set image deployment/deployment-pagamento-application deployment-pagamento-application=${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 13: Esperar até que o LoadBalancer seja criado
      - name: Wait for LoadBalancer
        run: |
          while [[ -z $(kubectl get svc restaurant-pagamento-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}') ]]; do
            echo "Waiting for LoadBalancer..."
            sleep 10
          done

      # Step 14: Obter URL do LoadBalancer
      - name: Get LoadBalancer URL
        run: |
          LOAD_BALANCER_URL=$(kubectl get svc restaurant-pagamento-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "LoadBalancer URL: $LOAD_BALANCER_URL"

