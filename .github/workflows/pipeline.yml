name: pipeline

on:
  push:
  
jobs:
  unit-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
      
    - run: mvn test  
    - name: Generate JaCoCo Badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2.0.1
    - name: Log coverage percentage
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"    
    - name: Upload JaCoCo coverage report
      uses: actions/upload-artifact@v4.4.0
      with:
        name: jacoco-report
        path: target/site/jacoco/
        
  code-analisys:
    runs-on: ubuntu-latest
    needs: unit-test
    
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
        
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=AlyMaciel_FIAP-LANCHONETE-PAGAMENTO
       
  build:
    runs-on: ubuntu-latest
    needs: code-analisys
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Build with Maven
      run: mvn -B package -DskipTests --file pom.xml      
    - name: Display structure of downloaded files
      run: ls -R
      working-directory: target/
    - name: Upload JAR
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
      uses: actions/upload-artifact@v4.4.0
      with:
        #Set artifact name
        name: artifact
        #From this path
        path: target/demo-0.0.2.7-SNAPSHOT.jar
    
    - name: Package
      run: mvn package  
               
  deploy-Pre:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release'
    environment:
      name: pre
    needs: build
    steps:
      - name: Deploy 
        shell: bash
        run: |
          echo "Deploy PRE"
          
  deploy-Prod:
    runs-on: ubuntu-latest
    
    if: github.ref == 'refs/heads/main'
    environment:
      name: prod
    needs: build
    steps:
      - name: Deploy 
        shell: bash
        run: deploy-aws
  
  deploy-aws:
      runs-on: ubuntu-latest
      steps:
      # Step 1: Fazer o checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Configurar credenciais da AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Criar repositório ECS caso não exista
      - name: Create ECR Repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }} || aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY }} --region ${{ secrets.AWS_REGION }}

      # Step 4: Fazer login no repositório ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # Step 5: Fazer build da imagem da aplicação java (baseado do arquivo docker do projeto)
      - name: Build Docker image
        run: |
          docker build -t restaurant-application .
          docker tag restaurant-application:latest ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 6: Fazer push da imagem criada para o repositório ECS
      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 7: Instalar kubectl na versão do cluster eks criado
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.31.0'

      # Step 8: Configuração do kubernates
      - name: Set up kubeconfig
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER }}

      # Step 9: Setar valores das variáveis nos arquivos do Kubernetes
      - name: Replace environment variables in k8s files
        run: |
          sed -i "s/{{DB_URL}}/${{ secrets.DB_URL }}/g" k8s/secret-postgres-db.yaml
          sed -i "s/{{DB_USER}}/${{ secrets.DB_USER }}/g" k8s/secret-postgres-db.yaml
          sed -i "s/{{DB_PASSWORD}}/${{ secrets.DB_PASSWORD }}/g" k8s/secret-postgres-db.yaml
          sed -i "s/{{DB_NAME}}/${{ secrets.DB_NAME }}/g" k8s/secret-postgres-db.yaml
          sed -i "s/{{DB_PORT}}/${{ secrets.DB_PORT }}/g" k8s/secret-postgres-db.yaml
          sed -i "s/{{ACCOUNT_ID}}/${{ secrets.ACCOUNT_ID }}/g" k8s/deployment.yaml
          sed -i "s/{{AWS_REGION}}/${{ secrets.AWS_REGION }}/g" k8s/deployment.yaml
          sed -i "s/{{ECR_REPOSITORY}}/${{ secrets.ECR_REPOSITORY }}/g" k8s/deployment.yaml

      # Step 10: Aplicar secrets no Kubernetes
      - name: Apply Kubernetes secrets
        run: |
          kubectl apply -f k8s/secret-postgres-db.yaml

      # Step 11: Deletar os pods existentes para forçar a criação de novos
      - name: Delete existing pods
        run: |
          kubectl delete pod -l app=deployment-restaurant-application

      # Step 12: Realizar deploy de imagem do ecs no cluster eks
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/svc-restaurant-application.yaml
          kubectl apply -f k8s/hpa.yaml
          kubectl set image deployment/deployment-restaurant-application deployment-restaurant-application=${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 13: Esperar até que o LoadBalancer seja criado
      - name: Wait for LoadBalancer
        run: |
          while [[ -z $(kubectl get svc restaurant-application-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}') ]]; do
            echo "Waiting for LoadBalancer..."
            sleep 10
          done

      # Step 14: Obter URL do LoadBalancer
      - name: Get LoadBalancer URL
        run: |
          LOAD_BALANCER_URL=$(kubectl get svc restaurant-application-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "LoadBalancer URL: $LOAD_BALANCER_URL"
